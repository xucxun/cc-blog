<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.blog.dao.UserMapper">

    <sql id="insertFields">
        account,nick_name, password, salt, email, role, status, activation_code, avatar, create_time
    </sql>

    <sql id="selectFields">
        id,account,nick_name, password, salt, email, role, status, activation_code, avatar, create_time,update_time
    </sql>

    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByIds" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where
        <if test="ids != null and ids.size() > 0">
            id in
            <foreach collection="ids" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="selectByAccount" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where account = #{account}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <select id="selectByNickName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where nick_name = #{nickName}
    </select>
    <select id="selectUserCount" resultType="java.lang.Integer">
        select count(id)
        from user
        where id != 1
    </select>
    <select id="findUsers" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id!=1
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <select id="searchUserList" resultType="User">
        select <include refid="selectFields"></include>
        from user
        <where>
            <if test="role != 3">
                and role = #{role}
            </if>
            <if test="status != 3">
                and status = #{status}
            </if>
            <if test="nickName != null">
                and nick_name LIKE CONCAT('%',#{nickName},'%')
            </if>
            <if test="email != null">
                and email LIKE CONCAT('%',#{email},'%')
            </if>
        </where>
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <select id="searchUserCount" resultType="int">
        select count(*)
        from user
        <where>
            <if test="role != 3">
                and role = #{role}
            </if>
            <if test="status != 3">
                and status = #{status}
            </if>
            <if test="nickName != null">
                and nick_name LIKE CONCAT('%',#{nickName},'%')
            </if>
            <if test="email != null">
                and email LIKE CONCAT('%',#{email},'%')
            </if>
        </where>
    </select>

    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{account},#{nickName}, #{password}, #{salt}, #{email}, #{role}, #{status}, #{activationCode}, #{avatar},
        #{createTime})
    </insert>

    <update id="updateStatus">
        update user set status = #{status},update_time = #{updateTime} where id = #{id}
    </update>

    <update id="updateAvatar">
        update user set avatar = #{avatar} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>

    <update id="updateRole">
        update user set role = #{role},update_time = #{updateTime} where id = #{id}
    </update>

</mapper>